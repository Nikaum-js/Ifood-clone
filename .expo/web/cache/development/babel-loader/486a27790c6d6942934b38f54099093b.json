{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport GestureHandler from \"./GestureHandler\";\n\nvar IndiscreteGestureHandler = function (_GestureHandler) {\n  _inherits(IndiscreteGestureHandler, _GestureHandler);\n\n  function IndiscreteGestureHandler() {\n    _classCallCheck(this, IndiscreteGestureHandler);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IndiscreteGestureHandler).apply(this, arguments));\n  }\n\n  _createClass(IndiscreteGestureHandler, [{\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$minPointers = _ref.minPointers,\n          minPointers = _ref$minPointers === void 0 ? 2 : _ref$minPointers,\n          _ref$maxPointers = _ref.maxPointers,\n          maxPointers = _ref$maxPointers === void 0 ? 2 : _ref$maxPointers,\n          props = _objectWithoutProperties(_ref, [\"minPointers\", \"maxPointers\"]);\n\n      return _get(_getPrototypeOf(IndiscreteGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        minPointers: minPointers,\n        maxPointers: maxPointers\n      }, props));\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_ref2, _recognizer, _ref3) {\n      var minPointers = _ref2.minPointers,\n          maxPointers = _ref2.maxPointers;\n      var pointerLength = _ref3.maxPointers;\n\n      if (pointerLength > maxPointers) {\n        return {\n          failed: true\n        };\n      }\n\n      var validPointerCount = pointerLength >= minPointers;\n      return {\n        success: validPointerCount\n      };\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      return false;\n    }\n  }]);\n\n  return IndiscreteGestureHandler;\n}(GestureHandler);\n\nexport default IndiscreteGestureHandler;","map":{"version":3,"sources":["IndiscreteGestureHandler.ts"],"names":["minPointers","maxPointers","props","pointerLength","failed","validPointerCount","success"],"mappings":";;;;;;;;;;;;;AAAA,OAAA,cAAA;;IAKA,wB;;;;;;;;;;;8CAKsE;AAAA,kCAA9CA,WAA8C;AAAA,UAA9CA,WAA8C,iCAAhD,CAAgD;AAAA,kCAA7BC,WAA6B;AAAA,UAA7BA,WAA6B,iCAAhD,CAAgD;AAAA,UAATC,KAAS;;AAClE;AACEF,QAAAA,WAD+B,EAC/BA,WADF;AAEEC,QAAAA,WAF+B,EAE/BA;AAFF,SAGKC,KAHL;AAKD;;;oDAEuB,W,SAItB;AAAA,UAHA,WAGA,SAHA,WAGA;AAAA,UAHeD,WAGf,SAHeA,WAGf;AAAA,UADeE,aACf,SADEF,WACF;;AACA,UAAIE,aAAa,GAAjB,WAAA,EAAiC;AAC/B,eAAO;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAP;AACD;;AACD,UAAMC,iBAAiB,GAAGF,aAAa,IAAvC,WAAA;AACA,aAAO;AACLG,QAAAA,OAAO,EAAED;AADJ,OAAP;AAGD;;;wBAxBgC;AAC/B,aAAA,KAAA;AACD;;;;EAHH,c;;AA2BA,eAAA,wBAAA","sourcesContent":["import GestureHandler from './GestureHandler';\n\n/**\n * The base class for **Rotation** and **Pinch** gesture handlers.\n */\nabstract class IndiscreteGestureHandler extends GestureHandler {\n  get shouldEnableGestureOnSetup() {\n    return false;\n  }\n\n  updateGestureConfig({ minPointers = 2, maxPointers = 2, ...props }) {\n    return super.updateGestureConfig({\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  isGestureEnabledForEvent(\n    { minPointers, maxPointers }: any,\n    _recognizer: any,\n    { maxPointers: pointerLength }: any\n  ) {\n    if (pointerLength > maxPointers) {\n      return { failed: true };\n    }\n    const validPointerCount = pointerLength >= minPointers;\n    return {\n      success: validPointerCount,\n    };\n  }\n}\nexport default IndiscreteGestureHandler;\n"]},"metadata":{},"sourceType":"module"}