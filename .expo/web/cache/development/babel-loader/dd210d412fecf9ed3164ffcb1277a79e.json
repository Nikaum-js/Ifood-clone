{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Hammer from '@egjs/hammerjs';\nimport { Direction } from \"./constants\";\nimport { GesturePropError } from \"./Errors\";\nimport DraggingGestureHandler from \"./DraggingGestureHandler\";\nimport { isnan } from \"./utils\";\n\nvar FlingGestureHandler = function (_DraggingGestureHandl) {\n  _inherits(FlingGestureHandler, _DraggingGestureHandl);\n\n  function FlingGestureHandler() {\n    _classCallCheck(this, FlingGestureHandler);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FlingGestureHandler).apply(this, arguments));\n  }\n\n  _createClass(FlingGestureHandler, [{\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(event) {\n      this.sendEvent(_objectSpread({}, event, {\n        eventType: Hammer.INPUT_MOVE,\n        isFinal: false,\n        isFirst: true\n      }));\n      this.isGestureRunning = false;\n      this.hasGestureFailed = false;\n      this.sendEvent(_objectSpread({}, event, {\n        eventType: Hammer.INPUT_END,\n        isFinal: true\n      }));\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this = this;\n\n      _get(_getPrototypeOf(FlingGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (this.hasGestureFailed) {\n        return;\n      }\n\n      if (ev.isFinal) {\n        setTimeout(function () {\n          if (_this.isGestureRunning) {\n            _this.cancelEvent(ev);\n          }\n        });\n      } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n        var gesture = this.hammer.get(this.name);\n\n        if (gesture.options.enable(gesture, ev)) {\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return {\n        pointers: this.config.numberOfPointers,\n        direction: this.getDirection()\n      };\n    }\n  }, {\n    key: \"getTargetDirections\",\n    value: function getTargetDirections(direction) {\n      var directions = [];\n\n      if (direction & Direction.RIGHT) {\n        directions.push(Hammer.DIRECTION_RIGHT);\n      }\n\n      if (direction & Direction.LEFT) {\n        directions.push(Hammer.DIRECTION_LEFT);\n      }\n\n      if (direction & Direction.UP) {\n        directions.push(Hammer.DIRECTION_UP);\n      }\n\n      if (direction & Direction.DOWN) {\n        directions.push(Hammer.DIRECTION_DOWN);\n      }\n\n      return directions;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var _this$getConfig = this.getConfig(),\n          direction = _this$getConfig.direction;\n\n      var directions = [];\n\n      if (direction & Direction.RIGHT) {\n        directions.push(Hammer.DIRECTION_HORIZONTAL);\n      }\n\n      if (direction & Direction.LEFT) {\n        directions.push(Hammer.DIRECTION_HORIZONTAL);\n      }\n\n      if (direction & Direction.UP) {\n        directions.push(Hammer.DIRECTION_VERTICAL);\n      }\n\n      if (direction & Direction.DOWN) {\n        directions.push(Hammer.DIRECTION_VERTICAL);\n      }\n\n      directions = _toConsumableArray(new Set(directions));\n      if (directions.length === 0) return Hammer.DIRECTION_NONE;\n      if (directions.length === 1) return directions[0];\n      return Hammer.DIRECTION_ALL;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_ref, _recognizer, _ref2) {\n      var numberOfPointers = _ref.numberOfPointers;\n      var pointerLength = _ref2.maxPointers;\n      var validPointerCount = pointerLength === numberOfPointers;\n\n      if (!validPointerCount && this.isGestureRunning) {\n        return {\n          failed: true\n        };\n      }\n\n      return {\n        success: validPointerCount\n      };\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref3) {\n      var _ref3$numberOfPointer = _ref3.numberOfPointers,\n          numberOfPointers = _ref3$numberOfPointer === void 0 ? 1 : _ref3$numberOfPointer,\n          direction = _ref3.direction,\n          props = _objectWithoutProperties(_ref3, [\"numberOfPointers\", \"direction\"]);\n\n      if (isnan(direction) || typeof direction !== 'number') {\n        throw new GesturePropError('direction', direction, 'number');\n      }\n\n      return _get(_getPrototypeOf(FlingGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        numberOfPointers: numberOfPointers,\n        direction: direction\n      }, props));\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'swipe';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Swipe;\n    }\n  }]);\n\n  return FlingGestureHandler;\n}(DraggingGestureHandler);\n\nexport default FlingGestureHandler;","map":{"version":3,"sources":["FlingGestureHandler.ts"],"names":["Hammer","eventType","isFinal","isFirst","ev","setTimeout","gesture","pointers","direction","directions","Direction","numberOfPointers","maxPointers","pointerLength","validPointerCount","failed","success","props","isnan"],"mappings":"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","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\n\nimport { Direction } from './constants';\nimport { GesturePropError } from './Errors';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isnan } from './utils';\nimport { HammerInputExt } from './GestureHandler';\n\nclass FlingGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'swipe';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Swipe;\n  }\n\n  onGestureActivated(event: HammerInputExt) {\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_MOVE,\n      isFinal: false,\n      isFirst: true,\n    });\n    this.isGestureRunning = false;\n    this.hasGestureFailed = false;\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_END,\n      isFinal: true,\n    });\n  }\n\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      setTimeout(() => {\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore FIXME(TS)\n      if (gesture.options.enable(gesture, ev)) {\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      // @ts-ignore FIXME(TS)\n      pointers: this.config.numberOfPointers,\n      direction: this.getDirection(),\n    };\n  }\n\n  getTargetDirections(direction: number) {\n    const directions = [];\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_RIGHT);\n    }\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_LEFT);\n    }\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_UP);\n    }\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_DOWN);\n    }\n    // const hammerDirection = directions.reduce((a, b) => a | b, 0);\n    return directions;\n  }\n\n  getDirection() {\n    // @ts-ignore FIXME(TS)\n    const { direction } = this.getConfig();\n\n    let directions = [];\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n    directions = [...new Set(directions)];\n\n    if (directions.length === 0) return Hammer.DIRECTION_NONE;\n    if (directions.length === 1) return directions[0];\n    return Hammer.DIRECTION_ALL;\n  }\n\n  isGestureEnabledForEvent(\n    { numberOfPointers }: any,\n    _recognizer: any,\n    { maxPointers: pointerLength }: any\n  ) {\n    const validPointerCount = pointerLength === numberOfPointers;\n    if (!validPointerCount && this.isGestureRunning) {\n      return { failed: true };\n    }\n    return { success: validPointerCount };\n  }\n\n  updateGestureConfig({ numberOfPointers = 1, direction, ...props }: any) {\n    if (isnan(direction) || typeof direction !== 'number') {\n      throw new GesturePropError('direction', direction, 'number');\n    }\n    return super.updateGestureConfig({\n      numberOfPointers,\n      direction,\n      ...props,\n    });\n  }\n}\n\nexport default FlingGestureHandler;\n"]},"metadata":{},"sourceType":"module"}