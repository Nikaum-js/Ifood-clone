{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Hammer from '@egjs/hammerjs';\nimport { State } from \"../State\";\nimport { CONTENT_TOUCHES_DELAY, CONTENT_TOUCHES_QUICK_TAP_END_DELAY } from \"./constants\";\nimport DiscreteGestureHandler from \"./DiscreteGestureHandler\";\nimport { fireAfterInterval, isValidNumber, isnan } from \"./utils\";\n\nvar PressGestureHandler = function (_DiscreteGestureHandl) {\n  _inherits(PressGestureHandler, _DiscreteGestureHandl);\n\n  function PressGestureHandler() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PressGestureHandler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PressGestureHandler)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"visualFeedbackTimer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"initialEvent\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"shouldDelayTouches\", true);\n\n    return _this;\n  }\n\n  _createClass(PressGestureHandler, [{\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(inputData) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(inputData);\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(_ref) {\n      var shouldCancelWhenOutside = _ref.shouldCancelWhenOutside,\n          maxDistSq = _ref.maxDistSq;\n      return shouldCancelWhenOutside || !isValidNumber(maxDistSq);\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      var _Hammer$INPUT_START$H;\n\n      return (_Hammer$INPUT_START$H = {}, _defineProperty2(_Hammer$INPUT_START$H, Hammer.INPUT_START, State.BEGAN), _defineProperty2(_Hammer$INPUT_START$H, Hammer.INPUT_MOVE, State.ACTIVE), _defineProperty2(_Hammer$INPUT_START$H, Hammer.INPUT_END, State.END), _defineProperty2(_Hammer$INPUT_START$H, Hammer.INPUT_CANCEL, State.CANCELLED), _Hammer$INPUT_START$H)[type];\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      if (!this.hasCustomActivationCriteria) {\n        return {\n          shouldCancelWhenOutside: true,\n          maxDistSq: 10\n        };\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return _objectSpread({}, _get(_getPrototypeOf(PressGestureHandler.prototype), \"getHammerConfig\", this).call(this), {\n        time: this.minDurationMs\n      });\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      this.onGestureStart(ev);\n    }\n  }, {\n    key: \"shouldDelayTouchForEvent\",\n    value: function shouldDelayTouchForEvent(_ref2) {\n      var pointerType = _ref2.pointerType;\n      return this.shouldDelayTouches && pointerType === 'touch';\n    }\n  }, {\n    key: \"onGestureStart\",\n    value: function onGestureStart(ev) {\n      var _this2 = this;\n\n      this.isGestureRunning = true;\n      clearTimeout(this.visualFeedbackTimer);\n      this.initialEvent = ev;\n      this.visualFeedbackTimer = fireAfterInterval(function () {\n        _this2.sendGestureStartedEvent(_this2.initialEvent);\n\n        _this2.initialEvent = null;\n      }, this.shouldDelayTouchForEvent(ev) && CONTENT_TOUCHES_DELAY);\n    }\n  }, {\n    key: \"sendGestureStartedEvent\",\n    value: function sendGestureStartedEvent(ev) {\n      clearTimeout(this.visualFeedbackTimer);\n      this.visualFeedbackTimer = null;\n      this.sendEvent(_objectSpread({}, ev, {\n        eventType: Hammer.INPUT_MOVE,\n        isFirst: true\n      }));\n    }\n  }, {\n    key: \"forceInvalidate\",\n    value: function forceInvalidate(event) {\n      _get(_getPrototypeOf(PressGestureHandler.prototype), \"forceInvalidate\", this).call(this, event);\n\n      clearTimeout(this.visualFeedbackTimer);\n      this.visualFeedbackTimer = null;\n      this.initialEvent = null;\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this3 = this;\n\n      _get(_getPrototypeOf(PressGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (this.isGestureRunning) {\n        if (ev.isFinal) {\n          var timeout;\n\n          if (this.visualFeedbackTimer) {\n            timeout = CONTENT_TOUCHES_QUICK_TAP_END_DELAY;\n            this.sendGestureStartedEvent(this.initialEvent);\n            this.initialEvent = null;\n          }\n\n          fireAfterInterval(function () {\n            _this3.sendEvent(_objectSpread({}, ev, {\n              eventType: Hammer.INPUT_END,\n              isFinal: true\n            }));\n\n            _this3.onGestureEnded();\n          }, timeout);\n        } else {\n          this.sendEvent(_objectSpread({}, ev, {\n            eventType: Hammer.INPUT_MOVE,\n            isFinal: false\n          }));\n        }\n      }\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref3) {\n      var _ref3$shouldActivateO = _ref3.shouldActivateOnStart,\n          shouldActivateOnStart = _ref3$shouldActivateO === void 0 ? false : _ref3$shouldActivateO,\n          _ref3$disallowInterru = _ref3.disallowInterruption,\n          disallowInterruption = _ref3$disallowInterru === void 0 ? false : _ref3$disallowInterru,\n          _ref3$shouldCancelWhe = _ref3.shouldCancelWhenOutside,\n          shouldCancelWhenOutside = _ref3$shouldCancelWhe === void 0 ? true : _ref3$shouldCancelWhe,\n          _ref3$minDurationMs = _ref3.minDurationMs,\n          minDurationMs = _ref3$minDurationMs === void 0 ? Number.NaN : _ref3$minDurationMs,\n          _ref3$maxDist = _ref3.maxDist,\n          maxDist = _ref3$maxDist === void 0 ? Number.NaN : _ref3$maxDist,\n          _ref3$minPointers = _ref3.minPointers,\n          minPointers = _ref3$minPointers === void 0 ? 1 : _ref3$minPointers,\n          _ref3$maxPointers = _ref3.maxPointers,\n          maxPointers = _ref3$maxPointers === void 0 ? 1 : _ref3$maxPointers,\n          props = _objectWithoutProperties(_ref3, [\"shouldActivateOnStart\", \"disallowInterruption\", \"shouldCancelWhenOutside\", \"minDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"]);\n\n      return _get(_getPrototypeOf(PressGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        shouldActivateOnStart: shouldActivateOnStart,\n        disallowInterruption: disallowInterruption,\n        shouldCancelWhenOutside: shouldCancelWhenOutside,\n        minDurationMs: minDurationMs,\n        maxDist: maxDist,\n        minPointers: minPointers,\n        maxPointers: maxPointers\n      }, props));\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'press';\n    }\n  }, {\n    key: \"minDurationMs\",\n    get: function get() {\n      return isnan(this.config.minDurationMs) ? 5 : this.config.minDurationMs;\n    }\n  }, {\n    key: \"maxDist\",\n    get: function get() {\n      return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Press;\n    }\n  }]);\n\n  return PressGestureHandler;\n}(DiscreteGestureHandler);\n\nexport default PressGestureHandler;","map":{"version":3,"sources":["PressGestureHandler.ts"],"names":["isnan","Hammer","maxDistSq","shouldCancelWhenOutside","isValidNumber","State","CANCELLED","time","minDurationMs","pointerType","clearTimeout","fireAfterInterval","eventType","isFirst","ev","timeout","isFinal","shouldActivateOnStart","disallowInterruption","Number","maxDist","minPointers","maxPointers","props"],"mappings":"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","sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport { State } from '../State';\nimport {\n  CONTENT_TOUCHES_DELAY,\n  CONTENT_TOUCHES_QUICK_TAP_END_DELAY,\n  HammerInputNames,\n} from './constants';\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { Config, HammerInputExt } from './GestureHandler';\nimport { fireAfterInterval, isValidNumber, isnan } from './utils';\n\nclass PressGestureHandler extends DiscreteGestureHandler {\n  private visualFeedbackTimer: any;\n  private initialEvent: HammerInputExt | null = null;\n  get name() {\n    return 'press';\n  }\n\n  get minDurationMs() {\n    // @ts-ignore FIXME(TS)\n    return isnan(this.config.minDurationMs) ? 5 : this.config.minDurationMs;\n  }\n\n  get maxDist() {\n    return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Press;\n  }\n\n  shouldDelayTouches = true;\n\n  simulateCancelEvent(inputData: HammerInputExt) {\n    // Long press never starts so we can't rely on the running event boolean.\n    this.hasGestureFailed = true;\n    this.cancelEvent(inputData);\n  }\n\n  updateHasCustomActivationCriteria({\n    shouldCancelWhenOutside,\n    maxDistSq,\n  }: Config & { shouldCancelWhenOutside: boolean }) {\n    return shouldCancelWhenOutside || !isValidNumber(maxDistSq);\n  }\n\n  getState(type: keyof typeof HammerInputNames): State {\n    return {\n      [Hammer.INPUT_START]: State.BEGAN,\n      [Hammer.INPUT_MOVE]: State.ACTIVE,\n      [Hammer.INPUT_END]: State.END,\n      [Hammer.INPUT_CANCEL]: State.CANCELLED,\n    }[type];\n  }\n\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        shouldCancelWhenOutside: true,\n        maxDistSq: 10,\n      };\n    }\n    return this.config;\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      // threshold: this.maxDist,\n      time: this.minDurationMs,\n    };\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.onGestureStart(ev);\n  }\n\n  shouldDelayTouchForEvent({ pointerType }: HammerInputExt) {\n    // Don't disable event for mouse input\n    return this.shouldDelayTouches && pointerType === 'touch';\n  }\n\n  onGestureStart(ev: HammerInputExt) {\n    this.isGestureRunning = true;\n    clearTimeout(this.visualFeedbackTimer);\n    this.initialEvent = ev;\n    this.visualFeedbackTimer = fireAfterInterval(() => {\n      this.sendGestureStartedEvent(this.initialEvent as HammerInputExt);\n      this.initialEvent = null;\n    }, this.shouldDelayTouchForEvent(ev) && CONTENT_TOUCHES_DELAY);\n  }\n\n  sendGestureStartedEvent(ev: HammerInputExt) {\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.sendEvent({\n      ...ev,\n      eventType: Hammer.INPUT_MOVE,\n      isFirst: true,\n    });\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    super.forceInvalidate(event);\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.initialEvent = null;\n  }\n\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (this.isGestureRunning) {\n      if (ev.isFinal) {\n        let timeout;\n        if (this.visualFeedbackTimer) {\n          // Aesthetic timing for a quick tap.\n          // We haven't activated the tap right away to emulate iOS `delaysContentTouches`\n          // Now we must send the initial activation event and wait a set amount of time before firing the end event.\n          timeout = CONTENT_TOUCHES_QUICK_TAP_END_DELAY;\n          this.sendGestureStartedEvent(this.initialEvent as HammerInputExt);\n          this.initialEvent = null;\n        }\n        fireAfterInterval(() => {\n          this.sendEvent({\n            ...ev,\n            eventType: Hammer.INPUT_END,\n            isFinal: true,\n          });\n          // @ts-ignore -- this should explicitly support undefined\n          this.onGestureEnded();\n        }, timeout);\n      } else {\n        this.sendEvent({\n          ...ev,\n          eventType: Hammer.INPUT_MOVE,\n          isFinal: false,\n        });\n      }\n    }\n  }\n\n  updateGestureConfig({\n    shouldActivateOnStart = false,\n    disallowInterruption = false,\n    shouldCancelWhenOutside = true,\n    minDurationMs = Number.NaN,\n    maxDist = Number.NaN,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldActivateOnStart,\n      disallowInterruption,\n      shouldCancelWhenOutside,\n      minDurationMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n}\nexport default PressGestureHandler;\n"]},"metadata":{},"sourceType":"module"}