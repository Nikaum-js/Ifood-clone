{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Hammer from '@egjs/hammerjs';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { State } from \"../State\";\nimport { EventMap } from \"./constants\";\nimport * as NodeManager from \"./NodeManager\";\nvar gestureInstances = 0;\n\nvar GestureHandler = function () {\n  _createClass(GestureHandler, [{\n    key: \"id\",\n    get: function get() {\n      return \"\".concat(this.name).concat(this.gestureInstance);\n    }\n  }, {\n    key: \"isDiscrete\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n  }]);\n\n  function GestureHandler() {\n    var _this = this;\n\n    _classCallCheck(this, GestureHandler);\n\n    _defineProperty(this, \"handlerTag\", void 0);\n\n    _defineProperty(this, \"isGestureRunning\", false);\n\n    _defineProperty(this, \"view\", null);\n\n    _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n\n    _defineProperty(this, \"hasGestureFailed\", false);\n\n    _defineProperty(this, \"hammer\", null);\n\n    _defineProperty(this, \"initialRotation\", null);\n\n    _defineProperty(this, \"__initialX\", void 0);\n\n    _defineProperty(this, \"__initialY\", void 0);\n\n    _defineProperty(this, \"config\", {});\n\n    _defineProperty(this, \"previousState\", State.UNDETERMINED);\n\n    _defineProperty(this, \"pendingGestures\", {});\n\n    _defineProperty(this, \"oldState\", State.UNDETERMINED);\n\n    _defineProperty(this, \"lastSentState\", null);\n\n    _defineProperty(this, \"gestureInstance\", void 0);\n\n    _defineProperty(this, \"_stillWaiting\", void 0);\n\n    _defineProperty(this, \"propsRef\", void 0);\n\n    _defineProperty(this, \"ref\", void 0);\n\n    _defineProperty(this, \"clearSelfAsPending\", function () {\n      if (Array.isArray(_this.config.waitFor)) {\n        for (var _iterator = _this.config.waitFor, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n\n          var _gesture2 = _ref;\n\n          _gesture2.removePendingGesture(_this.id);\n        }\n      }\n    });\n\n    _defineProperty(this, \"destroy\", function () {\n      _this.clearSelfAsPending();\n\n      if (_this.hammer) {\n        _this.hammer.stop(false);\n\n        _this.hammer.destroy();\n      }\n\n      _this.hammer = null;\n    });\n\n    _defineProperty(this, \"isPointInView\", function (_ref2) {\n      var x = _ref2.x,\n          y = _ref2.y;\n\n      var rect = _this.view.getBoundingClientRect();\n\n      var pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    });\n\n    _defineProperty(this, \"sendEvent\", function (nativeEvent) {\n      var _this$propsRef$curren = _this.propsRef.current,\n          onGestureHandlerEvent = _this$propsRef$curren.onGestureHandlerEvent,\n          onGestureHandlerStateChange = _this$propsRef$curren.onGestureHandlerStateChange;\n\n      var event = _this.transformEventData(nativeEvent);\n\n      invokeNullableMethod(onGestureHandlerEvent, event);\n\n      if (_this.lastSentState !== event.nativeEvent.state) {\n        _this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    });\n\n    _defineProperty(this, \"sync\", function () {\n      var gesture = _this.hammer.get(_this.name);\n\n      if (!gesture) return;\n\n      var enable = function enable(recognizer, inputData) {\n        if (!_this.config.enabled) {\n          _this.isGestureRunning = false;\n          _this.hasGestureFailed = false;\n          return false;\n        }\n\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return _this.shouldEnableGestureOnSetup;\n        }\n\n        if (_this.hasGestureFailed) {\n          return false;\n        }\n\n        if (!_this.isDiscrete) {\n          if (_this.isGestureRunning) {\n            return true;\n          }\n\n          _this._stillWaiting = _this._getPendingGestures();\n\n          if (_this._stillWaiting.length) {\n            for (var _iterator2 = _this._stillWaiting, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n              var _ref3;\n\n              if (_isArray2) {\n                if (_i2 >= _iterator2.length) break;\n                _ref3 = _iterator2[_i2++];\n              } else {\n                _i2 = _iterator2.next();\n                if (_i2.done) break;\n                _ref3 = _i2.value;\n              }\n\n              var _gesture4 = _ref3;\n\n              if (!_gesture4.isDiscrete && _gesture4.isGestureRunning) {\n                _this.hasGestureFailed = true;\n                _this.isGestureRunning = false;\n                return false;\n              }\n            }\n\n            return false;\n          }\n        }\n\n        if (!_this.hasCustomActivationCriteria) {\n          return true;\n        }\n\n        var deltaRotation = _this.initialRotation == null ? 0 : inputData.rotation - _this.initialRotation;\n\n        var _this$isGestureEnable = _this.isGestureEnabledForEvent(_this.getConfig(), recognizer, _objectSpread({}, inputData, {\n          deltaRotation: deltaRotation\n        })),\n            success = _this$isGestureEnable.success,\n            failed = _this$isGestureEnable.failed;\n\n        if (failed) {\n          _this.simulateCancelEvent(inputData);\n\n          _this.hasGestureFailed = true;\n        }\n\n        return success;\n      };\n\n      var params = _this.getHammerConfig();\n\n      gesture.set(_objectSpread({}, params, {\n        enable: enable\n      }));\n    });\n\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  _createClass(GestureHandler, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(_gesture) {}\n  }, {\n    key: \"removePendingGesture\",\n    value: function removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n  }, {\n    key: \"addPendingGesture\",\n    value: function addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref4) {\n      var _ref4$enabled = _ref4.enabled,\n          enabled = _ref4$enabled === void 0 ? true : _ref4$enabled,\n          props = _objectWithoutProperties(_ref4, [\"enabled\"]);\n\n      this.clearSelfAsPending();\n      this.config = ensureConfig(_objectSpread({\n        enabled: enabled\n      }, props));\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n\n      if (Array.isArray(this.config.waitFor)) {\n        for (var _iterator3 = this.config.waitFor, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n          var _ref5;\n\n          if (_isArray3) {\n            if (_i3 >= _iterator3.length) break;\n            _ref5 = _iterator3[_i3++];\n          } else {\n            _i3 = _iterator3.next();\n            if (_i3.done) break;\n            _ref5 = _i3.value;\n          }\n\n          var _gesture5 = _ref5;\n\n          _gesture5.addPendingGesture(this);\n        }\n      }\n\n      if (this.hammer) {\n        this.sync();\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      if (type == 0) {\n        return 0;\n      }\n\n      return EventMap[type];\n    }\n  }, {\n    key: \"transformEventData\",\n    value: function transformEventData(event) {\n      var eventType = event.eventType,\n          numberOfPointers = event.maxPointers;\n      var changedTouch = event.changedPointers[0];\n      var pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n      var state = this.getState(eventType);\n\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n\n      return {\n        nativeEvent: _objectSpread({\n          numberOfPointers: numberOfPointers,\n          state: state,\n          pointerInside: pointerInside\n        }, this.transformNativeEvent(event), {\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          oldState: this.oldState\n        }),\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_event) {\n      return {};\n    }\n  }, {\n    key: \"cancelPendingGestures\",\n    value: function cancelPendingGestures(event) {\n      for (var _i4 = 0, _Object$values = Object.values(this.pendingGestures); _i4 < _Object$values.length; _i4++) {\n        var gesture = _Object$values[_i4];\n\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n  }, {\n    key: \"notifyPendingGestures\",\n    value: function notifyPendingGestures() {\n      for (var _i5 = 0, _Object$values2 = Object.values(this.pendingGestures); _i5 < _Object$values2.length; _i5++) {\n        var gesture = _Object$values2[_i5];\n\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n  }, {\n    key: \"forceInvalidate\",\n    value: function forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n  }, {\n    key: \"cancelEvent\",\n    value: function cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent(_objectSpread({}, event, {\n        eventType: Hammer.INPUT_CANCEL,\n        isFinal: true\n      }));\n      this.onGestureEnded(event);\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(_ref6) {\n      var isFirst = _ref6.isFirst;\n\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n  }, {\n    key: \"setView\",\n    value: function setView(ref, propsRef) {\n      var _this2 = this;\n\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n\n      this.propsRef = propsRef;\n      this.ref = ref;\n      this.view = findNodeHandle(ref);\n      this.hammer = new Hammer.Manager(this.view);\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      var NativeGestureClass = this.NativeGestureClass;\n      var gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', function (ev) {\n        if (!_this2.config.enabled) {\n          _this2.hasGestureFailed = false;\n          _this2.isGestureRunning = false;\n          return;\n        }\n\n        _this2.onRawEvent(ev);\n\n        if (_this2.initialRotation === null && ev.rotation !== 0) {\n          _this2.initialRotation = ev.rotation;\n        }\n\n        if (ev.isFinal) {\n          setTimeout(function () {\n            _this2.initialRotation = null;\n            _this2.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this3 = this;\n\n      if (!this.isDiscrete) {\n        this.hammer.on(\"\".concat(this.name, \"start\"), function (event) {\n          return _this3.onStart(event);\n        });\n        this.hammer.on(\"\".concat(this.name, \"end \").concat(this.name, \"cancel\"), function (event) {\n          _this3.onGestureEnded(event);\n        });\n      }\n\n      this.hammer.on(this.name, function (ev) {\n        return _this3.onGestureActivated(ev);\n      });\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(_ref7) {\n      var deltaX = _ref7.deltaX,\n          deltaY = _ref7.deltaY,\n          rotation = _ref7.rotation;\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n  }, {\n    key: \"onSuccess\",\n    value: function onSuccess() {}\n  }, {\n    key: \"_getPendingGestures\",\n    value: function _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        var stillWaiting = this.config.waitFor.filter(function (_ref8) {\n          var hasGestureFailed = _ref8.hasGestureFailed;\n          return hasGestureFailed === false;\n        });\n        return stillWaiting;\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      var pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers: pointers\n      };\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(_inputData) {}\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n  }]);\n\n  return GestureHandler;\n}();\n\nfunction invokeNullableMethod(method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        var handler = method.__getHandler();\n\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          var argMapping = method.__nodeConfig.argMapping;\n\n          if (Array.isArray(argMapping)) {\n            for (var index in argMapping) {\n              var _argMapping$index = _slicedToArray(argMapping[index], 2),\n                  key = _argMapping$index[0],\n                  value = _argMapping$index[1];\n\n              if (key in event.nativeEvent) {\n                var nativeValue = event.nativeEvent[key];\n\n                if (value && value.setValue) {\n                  value.setValue(nativeValue);\n                } else {\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction ensureConfig(config) {\n  var props = _objectSpread({}, config);\n\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor).map(function (_ref9) {\n      var handlerTag = _ref9.handlerTag;\n      return NodeManager.getHandler(handlerTag);\n    }).filter(function (v) {\n      return v;\n    });\n  } else {\n    props.waitFor = null;\n  }\n\n  var configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n  configProps.forEach(function (prop) {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props;\n}\n\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;","map":{"version":3,"sources":["GestureHandler.ts"],"names":["gestureInstances","State","UNDETERMINED","constructor","gesture","success","Array","enabled","props","ensureConfig","y","rect","pointerInside","x","type","EventMap","maxPointers","numberOfPointers","changedTouch","event","clientY","state","nativeEvent","handlerTag","target","oldState","timeStamp","Date","onGestureHandlerStateChange","invokeNullableMethod","Object","eventType","Hammer","isFinal","isFirst","ref","findNodeHandle","NativeGestureClass","ev","setTimeout","rotation","stillWaiting","hasGestureFailed","pointers","enable","recognizer","inputData","deltaRotation","failed","params","method","handler","argMapping","key","nativeValue","value","config","asArray","NodeManager","v","configProps","prop","Number"],"mappings":"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","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\n\n// TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\nexport type HammerInputExt = Omit<HammerInput, 'destroy' | 'handler' | 'init'>;\n\nexport type Config = Partial<{\n  enabled: boolean;\n  minPointers: number;\n  maxPointers: number;\n  minDist: number;\n  minDistSq: number;\n  minVelocity: number;\n  minVelocitySq: number;\n  maxDist: number;\n  maxDistSq: number;\n  failOffsetXStart: number;\n  failOffsetYStart: number;\n  failOffsetXEnd: number;\n  failOffsetYEnd: number;\n  activeOffsetXStart: number;\n  activeOffsetXEnd: number;\n  activeOffsetYStart: number;\n  activeOffsetYEnd: number;\n  waitFor: any[] | null;\n}>;\n\ntype NativeEvent = ReturnType<GestureHandler['transformEventData']>;\n\nlet gestureInstances = 0;\n\nabstract class GestureHandler {\n  public handlerTag: any;\n  public isGestureRunning = false;\n  public view: number | null = null;\n  protected hasCustomActivationCriteria: boolean;\n  protected hasGestureFailed = false;\n  protected hammer: HammerManager | null = null;\n  protected initialRotation: number | null = null;\n  protected __initialX: any;\n  protected __initialY: any;\n  protected config: Config = {};\n  protected previousState: State = State.UNDETERMINED;\n  private pendingGestures: Record<string, this> = {};\n  private oldState: State = State.UNDETERMINED;\n  private lastSentState: State | null = null;\n  private gestureInstance: number;\n  private _stillWaiting: any;\n  private propsRef: any;\n  private ref: any;\n\n  abstract get name(): string;\n\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(_gesture: this) {}\n\n  removePendingGesture(id: string) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture: this) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent(\n    _config: any,\n    _recognizer: any,\n    _event: any\n  ): { failed?: boolean; success?: boolean } {\n    return { success: true };\n  }\n\n  get NativeGestureClass(): RecognizerStatic {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(_config: Config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = ensureConfig({ enabled, ...props });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\n      this.config\n    );\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop(false);\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }: { x: number; y: number }) => {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const pointerInside =\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type: keyof typeof EventMap): State {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n    return EventMap[type];\n  }\n\n  transformEventData(event: HammerInputExt) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY,\n    });\n\n    // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n    const state = this.getState(eventType as 1 | 2 | 4 | 8);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: this.oldState,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(_event: HammerInputExt) {\n    return {};\n  }\n\n  sendEvent = (nativeEvent: HammerInputExt) => {\n    const {\n      onGestureHandlerEvent,\n      onGestureHandlerStateChange,\n    } = this.propsRef.current;\n\n    const event = this.transformEventData(nativeEvent);\n\n    invokeNullableMethod(onGestureHandlerEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state as State;\n      invokeNullableMethod(onGestureHandlerStateChange, event);\n    }\n  };\n\n  cancelPendingGestures(event: HammerInputExt) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n  onGestureEnded(event: HammerInputExt) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event: HammerInputExt) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }: HammerInputExt) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  setView(ref: Parameters<typeof findNodeHandle>['0'], propsRef: any) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.view = findNodeHandle(ref);\n    this.hammer = new Hammer.Manager(this.view as any);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    const { NativeGestureClass } = this;\n    // @ts-ignore TODO(TS)\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', (ev: HammerInput) => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent((ev as unknown) as HammerInputExt);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer!.on(`${this.name}start`, (event: HammerInput) =>\n        this.onStart((event as unknown) as HammerInputExt)\n      );\n      this.hammer!.on(\n        `${this.name}end ${this.name}cancel`,\n        (event: HammerInput) => {\n          this.onGestureEnded((event as unknown) as HammerInputExt);\n        }\n      );\n    }\n    this.hammer!.on(this.name, (ev: HammerInput) =>\n      this.onGestureActivated((ev as unknown) as HammerInputExt)\n    ); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n\n  onStart({ deltaX, deltaY, rotation }: HammerInputExt) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers\n        ? this.config.minPointers\n        : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer!.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer: any, inputData: any) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (\n        !inputData ||\n        !recognizer.options ||\n        typeof inputData.maxPointers === 'undefined'\n      ) {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this.hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null\n          ? 0\n          : inputData.rotation - this.initialRotation;\n      // @ts-ignore FIXME(TS)\n      const { success, failed } = this.isGestureEnabledForEvent(\n        this.getConfig(),\n        recognizer,\n        {\n          ...inputData,\n          deltaRotation,\n        }\n      );\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    // @ts-ignore FIXME(TS)\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(_inputData: any) {}\n}\n\n// TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(\n  method:\n    | ((event: NativeEvent) => void)\n    | { __getHandler: () => (event: NativeEvent) => void }\n    | { __nodeConfig: { argMapping: any } },\n  event: NativeEvent\n) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if (\n        '__getHandler' in method &&\n        typeof method.__getHandler === 'function'\n      ) {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const index in argMapping) {\n              const [key, value] = argMapping[index];\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// Validate the props\nfunction ensureConfig(config: Config): Required<Config> {\n  const props = { ...config };\n\n  // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist! * props.minDist!;\n  }\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity! * props.minVelocity!;\n  }\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist! * config.maxDist!;\n  }\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor)\n      .map(({ handlerTag }: { handlerTag: number }) =>\n        NodeManager.getHandler(handlerTag)\n      )\n      .filter((v) => v);\n  } else {\n    props.waitFor = null;\n  }\n\n  const configProps = [\n    'minPointers',\n    'maxPointers',\n    'minDist',\n    'maxDist',\n    'maxDistSq',\n    'minVelocitySq',\n    'minDistSq',\n    'minVelocity',\n    'failOffsetXStart',\n    'failOffsetYStart',\n    'failOffsetXEnd',\n    'failOffsetYEnd',\n    'activeOffsetXStart',\n    'activeOffsetXEnd',\n    'activeOffsetYStart',\n    'activeOffsetYEnd',\n  ] as const;\n  configProps.forEach((prop: typeof configProps[number]) => {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props as Required<Config>; // TODO(TS) how to convince TS that props are filled?\n}\n\nfunction asArray<T>(value: T | T[]) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"]},"metadata":{},"sourceType":"module"}