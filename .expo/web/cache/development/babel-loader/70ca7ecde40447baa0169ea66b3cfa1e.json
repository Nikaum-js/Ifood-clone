{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-core/src/navigators/createNavigator.js\";\nimport React from 'react';\nimport invariant from \"../utils/invariant\";\nimport ThemeContext from \"../views/ThemeContext\";\n\nfunction createNavigator(NavigatorView, router, navigationConfig) {\n  var Navigator = function (_React$Component) {\n    _inherits(Navigator, _React$Component);\n\n    function Navigator(props, context) {\n      var _this;\n\n      _classCallCheck(this, Navigator);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Navigator).call(this, props, context));\n      _this.state = {\n        descriptors: {},\n        screenProps: _this.props.screenProps,\n        theme: context,\n        themeContext: context\n      };\n      return _this;\n    }\n\n    _createClass(Navigator, [{\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        if (this.context !== this.state.themeContext) {\n          this.setState({\n            themeContext: this.context\n          });\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return React.createElement(NavigatorView, _extends({}, this.props, {\n          screenProps: this.state.screenProps,\n          navigation: this.props.navigation,\n          navigationConfig: navigationConfig,\n          descriptors: this.state.descriptors,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          }\n        }));\n      }\n    }], [{\n      key: \"getDerivedStateFromProps\",\n      value: function getDerivedStateFromProps(nextProps, currentState) {\n        var prevDescriptors = currentState.descriptors;\n        var navigation = nextProps.navigation,\n            screenProps = nextProps.screenProps;\n        invariant(navigation != null, 'The navigation prop is missing for this navigator. In react-navigation 3 you must set up your app container directly. More info: https://reactnavigation.org/docs/en/app-containers.html');\n        var state = navigation.state;\n        var routes = state.routes;\n\n        if (typeof routes === 'undefined') {\n          throw new TypeError('No \"routes\" found in navigation state. Did you try to pass the navigation prop of a React component to a Navigator child? See https://reactnavigation.org/docs/en/custom-navigators.html#navigator-navigation-prop');\n        }\n\n        var descriptors = routes.reduce(function (acc, route) {\n          if (prevDescriptors && prevDescriptors[route.key] && route === prevDescriptors[route.key].state && screenProps === currentState.screenProps && currentState.themeContext === currentState.theme) {\n            acc[route.key] = prevDescriptors[route.key];\n            return acc;\n          }\n\n          var getComponent = router.getComponentForRouteName.bind(null, route.routeName);\n          var childNavigation = navigation.getChildNavigation(route.key);\n          var options = router.getScreenOptions(childNavigation, screenProps, currentState.themeContext);\n          acc[route.key] = {\n            key: route.key,\n            getComponent: getComponent,\n            options: options,\n            state: route,\n            navigation: childNavigation\n          };\n          return acc;\n        }, {});\n        return {\n          descriptors: descriptors,\n          screenProps: screenProps,\n          theme: state.themeContext\n        };\n      }\n    }]);\n\n    return Navigator;\n  }(React.Component);\n\n  Navigator.contextType = ThemeContext;\n  Navigator.router = router;\n  Navigator.navigationOptions = navigationConfig.navigationOptions;\n  return Navigator;\n}\n\nexport default createNavigator;","map":{"version":3,"sources":["createNavigator.js"],"names":["Navigator","React","navigationConfig","descriptors","screenProps","theme","themeContext","prevDescriptors","currentState","navigation","nextProps","invariant","state","routes","route","acc","getComponent","router","childNavigation","options","key"],"mappings":"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","sourcesContent":["import React from 'react';\nimport invariant from '../utils/invariant';\nimport ThemeContext from '../views/ThemeContext';\n\nfunction createNavigator(NavigatorView, router, navigationConfig) {\n  class Navigator extends React.Component {\n    static contextType = ThemeContext;\n    static router = router;\n    static navigationOptions = navigationConfig.navigationOptions;\n\n    constructor(props, context) {\n      super(props, context);\n\n      this.state = {\n        descriptors: {},\n        screenProps: this.props.screenProps,\n        theme: context,\n        themeContext: context,\n      };\n    }\n\n    static getDerivedStateFromProps(nextProps, currentState) {\n      const prevDescriptors = currentState.descriptors;\n      const { navigation, screenProps } = nextProps;\n      invariant(\n        navigation != null,\n        'The navigation prop is missing for this navigator. In react-navigation 3 you must set up your app container directly. More info: https://reactnavigation.org/docs/en/app-containers.html'\n      );\n      const { state } = navigation;\n      const { routes } = state;\n      if (typeof routes === 'undefined') {\n        throw new TypeError(\n          'No \"routes\" found in navigation state. Did you try to pass the navigation prop of a React component to a Navigator child? See https://reactnavigation.org/docs/en/custom-navigators.html#navigator-navigation-prop'\n        );\n      }\n\n      const descriptors = routes.reduce((acc, route) => {\n        if (\n          prevDescriptors &&\n          prevDescriptors[route.key] &&\n          route === prevDescriptors[route.key].state &&\n          screenProps === currentState.screenProps &&\n          currentState.themeContext === currentState.theme\n        ) {\n          acc[route.key] = prevDescriptors[route.key];\n          return acc;\n        }\n        const getComponent = router.getComponentForRouteName.bind(\n          null,\n          route.routeName\n        );\n        const childNavigation = navigation.getChildNavigation(route.key);\n        const options = router.getScreenOptions(\n          childNavigation,\n          screenProps,\n          currentState.themeContext\n        );\n        acc[route.key] = {\n          key: route.key,\n          getComponent,\n          options,\n          state: route,\n          navigation: childNavigation,\n        };\n        return acc;\n      }, {});\n\n      return { descriptors, screenProps, theme: state.themeContext };\n    }\n\n    componentDidUpdate() {\n      if (this.context !== this.state.themeContext) {\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState({ themeContext: this.context });\n      }\n    }\n\n    render() {\n      return (\n        <NavigatorView\n          {...this.props}\n          screenProps={this.state.screenProps}\n          navigation={this.props.navigation}\n          navigationConfig={navigationConfig}\n          descriptors={this.state.descriptors}\n        />\n      );\n    }\n  }\n\n  return Navigator;\n}\n\nexport default createNavigator;\n"]},"metadata":{},"sourceType":"module"}