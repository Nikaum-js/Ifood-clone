{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/vendor/views/Stack/Card.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport { PanGestureHandler, State as GestureState } from 'react-native-gesture-handler';\nimport Color from 'color';\nimport StackGestureRefContext from \"../../utils/GestureHandlerRefContext\";\nimport CardAnimationContext from \"../../utils/CardAnimationContext\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nimport getInvertedMultiplier from \"../../utils/getInvertedMultiplier\";\nimport memoize from \"../../utils/memoize\";\nvar GESTURE_VELOCITY_IMPACT = 0.3;\nvar TRUE = 1;\nvar FALSE = 0;\nvar GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nvar GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nvar Card = function (_React$Component) {\n  _inherits(Card, _React$Component);\n\n  function Card() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Card);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Card)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.isClosing = new Animated.Value(FALSE);\n    _this.inverted = new Animated.Value(getInvertedMultiplier(_this.props.gestureDirection));\n    _this.layout = {\n      width: new Animated.Value(_this.props.layout.width),\n      height: new Animated.Value(_this.props.layout.height)\n    };\n    _this.isSwiping = new Animated.Value(FALSE);\n\n    _this.animate = function (_ref) {\n      var closing = _ref.closing,\n          velocity = _ref.velocity;\n      var _this$props = _this.props,\n          gesture = _this$props.gesture,\n          transitionSpec = _this$props.transitionSpec,\n          onOpen = _this$props.onOpen,\n          onClose = _this$props.onClose,\n          onTransitionStart = _this$props.onTransitionStart;\n\n      var toValue = _this.getAnimateToValue(_objectSpread({}, _this.props, {\n        closing: closing\n      }));\n\n      var spec = closing ? transitionSpec.close : transitionSpec.open;\n      var animation = spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n      _this.setPointerEventsEnabled(!closing);\n\n      _this.handleStartInteraction();\n\n      onTransitionStart == null ? void 0 : onTransitionStart({\n        closing: closing\n      });\n      animation(gesture, _objectSpread({}, spec.config, {\n        velocity: velocity,\n        toValue: toValue,\n        useNativeDriver: true,\n        isInteraction: false\n      })).start(function (_ref2) {\n        var finished = _ref2.finished;\n\n        _this.handleEndInteraction();\n\n        if (finished) {\n          if (closing) {\n            onClose();\n          } else {\n            onOpen();\n          }\n        }\n      });\n    };\n\n    _this.getAnimateToValue = function (_ref3) {\n      var closing = _ref3.closing,\n          layout = _ref3.layout,\n          gestureDirection = _ref3.gestureDirection;\n\n      if (!closing) {\n        return 0;\n      }\n\n      return getDistanceForDirection(layout, gestureDirection);\n    };\n\n    _this.setPointerEventsEnabled = function (enabled) {\n      var pointerEvents = enabled ? 'box-none' : 'none';\n      _this.content.current && _this.content.current.setNativeProps({\n        pointerEvents: pointerEvents\n      });\n    };\n\n    _this.content = React.createRef();\n\n    _this.handleStartInteraction = function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    };\n\n    _this.handleEndInteraction = function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    };\n\n    _this.handleGestureStateChange = function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props2 = _this.props,\n          layout = _this$props2.layout,\n          onGestureBegin = _this$props2.onGestureBegin,\n          onGestureCanceled = _this$props2.onGestureCanceled,\n          onGestureEnd = _this$props2.onGestureEnd,\n          gestureDirection = _this$props2.gestureDirection,\n          gestureVelocityImpact = _this$props2.gestureVelocityImpact;\n\n      switch (nativeEvent.state) {\n        case GestureState.BEGAN:\n          _this.isSwiping.setValue(TRUE);\n\n          _this.handleStartInteraction();\n\n          onGestureBegin == null ? void 0 : onGestureBegin();\n          break;\n\n        case GestureState.CANCELLED:\n          _this.isSwiping.setValue(FALSE);\n\n          _this.handleEndInteraction();\n\n          onGestureCanceled == null ? void 0 : onGestureCanceled();\n          break;\n\n        case GestureState.END:\n          {\n            _this.isSwiping.setValue(FALSE);\n\n            var distance;\n            var translation;\n            var velocity;\n\n            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {\n              distance = layout.height;\n              translation = nativeEvent.translationY;\n              velocity = nativeEvent.velocityY;\n            } else {\n              distance = layout.width;\n              translation = nativeEvent.translationX;\n              velocity = nativeEvent.velocityX;\n            }\n\n            var closing = Math.abs(translation + velocity * gestureVelocityImpact) > distance / 2 ? velocity !== 0 || translation !== 0 : false;\n\n            _this.animate({\n              closing: closing,\n              velocity: velocity\n            });\n\n            onGestureEnd == null ? void 0 : onGestureEnd();\n            break;\n          }\n      }\n    };\n\n    _this.getInterpolatedStyle = memoize(function (styleInterpolator, index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {\n      return styleInterpolator({\n        index: index,\n        current: {\n          progress: current\n        },\n        next: next && {\n          progress: next\n        },\n        closing: _this.isClosing,\n        swiping: _this.isSwiping,\n        inverted: _this.inverted,\n        layouts: {\n          screen: layout\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft\n        }\n      });\n    });\n    _this.getCardAnimationContext = memoize(function (index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {\n      return {\n        index: index,\n        current: {\n          progress: current\n        },\n        next: next && {\n          progress: next\n        },\n        closing: _this.isClosing,\n        swiping: _this.isSwiping,\n        inverted: _this.inverted,\n        layouts: {\n          screen: layout\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft\n        }\n      };\n    });\n    _this.gestureRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Card, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.animate({\n        closing: this.props.closing\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n          layout = _this$props3.layout,\n          gestureDirection = _this$props3.gestureDirection,\n          closing = _this$props3.closing;\n      var width = layout.width,\n          height = layout.height;\n\n      if (width !== prevProps.layout.width) {\n        this.layout.width.setValue(width);\n      }\n\n      if (height !== prevProps.layout.height) {\n        this.layout.height.setValue(height);\n      }\n\n      if (gestureDirection !== prevProps.gestureDirection) {\n        this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n      }\n\n      if (this.getAnimateToValue(this.props) !== this.getAnimateToValue(prevProps)) {\n        this.animate({\n          closing: closing\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"gestureActivationCriteria\",\n    value: function gestureActivationCriteria() {\n      var _this$props4 = this.props,\n          layout = _this$props4.layout,\n          gestureDirection = _this$props4.gestureDirection,\n          gestureResponseDistance = _this$props4.gestureResponseDistance;\n      var distance = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? (gestureResponseDistance == null ? void 0 : gestureResponseDistance.vertical) !== undefined ? gestureResponseDistance.vertical : GESTURE_RESPONSE_DISTANCE_VERTICAL : (gestureResponseDistance == null ? void 0 : gestureResponseDistance.horizontal) !== undefined ? gestureResponseDistance.horizontal : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n      if (gestureDirection === 'vertical') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: 5,\n          hitSlop: {\n            bottom: -layout.height + distance\n          }\n        };\n      } else if (gestureDirection === 'vertical-inverted') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: -5,\n          hitSlop: {\n            top: -layout.height + distance\n          }\n        };\n      } else {\n        var hitSlop = -layout.width + distance;\n        var invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n        if (invertedMultiplier === 1) {\n          return {\n            minOffsetX: 5,\n            maxDeltaY: 20,\n            hitSlop: {\n              right: hitSlop\n            }\n          };\n        } else {\n          return {\n            minOffsetX: -5,\n            maxDeltaY: 20,\n            hitSlop: {\n              left: hitSlop\n            }\n          };\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          styleInterpolator = _this$props5.styleInterpolator,\n          index = _this$props5.index,\n          current = _this$props5.current,\n          gesture = _this$props5.gesture,\n          next = _this$props5.next,\n          layout = _this$props5.layout,\n          insets = _this$props5.insets,\n          overlayEnabled = _this$props5.overlayEnabled,\n          shadowEnabled = _this$props5.shadowEnabled,\n          gestureEnabled = _this$props5.gestureEnabled,\n          gestureDirection = _this$props5.gestureDirection,\n          children = _this$props5.children,\n          customContainerStyle = _this$props5.containerStyle,\n          contentStyle = _this$props5.contentStyle,\n          rest = _objectWithoutProperties(_this$props5, [\"styleInterpolator\", \"index\", \"current\", \"gesture\", \"next\", \"layout\", \"insets\", \"overlayEnabled\", \"shadowEnabled\", \"gestureEnabled\", \"gestureDirection\", \"children\", \"containerStyle\", \"contentStyle\"]);\n\n      var interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n      var animationContext = this.getCardAnimationContext(index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n      var containerStyle = interpolatedStyle.containerStyle,\n          cardStyle = interpolatedStyle.cardStyle,\n          overlayStyle = interpolatedStyle.overlayStyle,\n          shadowStyle = interpolatedStyle.shadowStyle;\n      var handleGestureEvent = gestureEnabled ? Animated.event([{\n        nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {\n          translationY: gesture\n        } : {\n          translationX: gesture\n        }\n      }], {\n        useNativeDriver: true\n      }) : undefined;\n\n      var _StyleSheet$flatten = StyleSheet.flatten(contentStyle || {}),\n          backgroundColor = _StyleSheet$flatten.backgroundColor;\n\n      var isTransparent = backgroundColor ? Color(backgroundColor).alpha() === 0 : false;\n      return React.createElement(View, _extends({\n        pointerEvents: \"box-none\"\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455\n        }\n      }), overlayEnabled && overlayStyle ? React.createElement(Animated.View, {\n        pointerEvents: \"none\",\n        style: [styles.overlay, overlayStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 457\n        }\n      }) : null, React.createElement(Animated.View, {\n        style: [styles.container, containerStyle, customContainerStyle],\n        pointerEvents: \"box-none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462\n        }\n      }, React.createElement(PanGestureHandler, _extends({\n        ref: this.gestureRef,\n        enabled: layout.width !== 0 && gestureEnabled,\n        onGestureEvent: handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange\n      }, this.gestureActivationCriteria(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466\n        }\n      }), React.createElement(Animated.View, {\n        style: [styles.container, cardStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473\n        }\n      }, shadowEnabled && shadowStyle && !isTransparent ? React.createElement(Animated.View, {\n        style: [styles.shadow, gestureDirection === 'horizontal' ? styles.shadowHorizontal : styles.shadowVertical, shadowStyle],\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475\n        }\n      }) : null, React.createElement(View, {\n        ref: this.content,\n        style: [styles.content, contentStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 486\n        }\n      }, React.createElement(StackGestureRefContext.Provider, {\n        value: this.gestureRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487\n        }\n      }, React.createElement(CardAnimationContext.Provider, {\n        value: animationContext,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488\n        }\n      }, children)))))));\n    }\n  }]);\n\n  return Card;\n}(React.Component);\n\nCard.defaultProps = {\n  overlayEnabled: Platform.OS !== 'ios',\n  shadowEnabled: true,\n  gestureEnabled: true,\n  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT\n};\nexport { Card as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  content: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  overlay: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    backgroundColor: '#000'\n  }),\n  shadow: {\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3\n  },\n  shadowHorizontal: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: {\n      width: -1,\n      height: 1\n    }\n  },\n  shadowVertical: {\n    top: 0,\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: {\n      width: 1,\n      height: -1\n    }\n  }\n});","map":{"version":3,"sources":["Card.tsx"],"names":["State","GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","Card","React","Component","defaultProps","overlayEnabled","Platform","shadowEnabled","gestureEnabled","gestureVelocityImpact","closing","prevProps","layout","gestureDirection","width","height","getInvertedMultiplier","isClosing","Animated","inverted","isSwiping","animate","velocity","gesture","transitionSpec","onOpen","onClose","onTransitionStart","toValue","spec","animation","useNativeDriver","isInteraction","finished","getAnimateToValue","getDistanceForDirection","setPointerEventsEnabled","pointerEvents","enabled","content","handleStartInteraction","InteractionManager","handleEndInteraction","handleGestureStateChange","nativeEvent","onGestureBegin","onGestureCanceled","onGestureEnd","GestureState","distance","translation","Math","getInterpolatedStyle","memoize","styleInterpolator","index","current","progress","next","swiping","layouts","screen","insets","top","right","bottom","left","getCardAnimationContext","gestureResponseDistance","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","gestureRef","children","customContainerStyle","contentStyle","rest","interpolatedStyle","animationContext","containerStyle","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","translationY","translationX","backgroundColor","StyleSheet","isTransparent","Color","styles","container","flex","overflow","overlay","shadow","position","shadowRadius","shadowColor","shadowOpacity","shadowHorizontal","shadowOffset","shadowVertical"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  ViewProps,\n  StyleProp,\n  ViewStyle,\n  Platform,\n  InteractionManager,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  State as GestureState,\n  PanGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\nimport { EdgeInsets } from 'react-native-safe-area-context';\nimport Color from 'color';\nimport StackGestureRefContext from '../../utils/GestureHandlerRefContext';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport {\n  TransitionSpec,\n  StackCardStyleInterpolator,\n  GestureDirection,\n  Layout,\n} from '../../types';\n\ntype Props = ViewProps & {\n  index: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransitionStart?: (props: { closing: boolean }) => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  children: React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    overlayEnabled: Platform.OS !== 'ios',\n    shadowEnabled: true,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    if (\n      this.getAnimateToValue(this.props) !== this.getAnimateToValue(prevProps)\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.handleEndInteraction();\n  }\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const {\n      gesture,\n      transitionSpec,\n      onOpen,\n      onClose,\n      onTransitionStart,\n    } = this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    onTransitionStart?.({ closing });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.content.current &&\n      this.content.current.setNativeProps({ pointerEvents });\n  };\n\n  private content = React.createRef<View>();\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.BEGAN:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED:\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n        onGestureCanceled?.();\n        break;\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          Math.abs(translation + velocity * gestureVelocityImpact) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : false;\n\n        this.animate({ closing, velocity });\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) =>\n      styleInterpolator({\n        index,\n        current: { progress: current },\n        next: next && { progress: next },\n        closing: this.isClosing,\n        swiping: this.isSwiping,\n        inverted: this.inverted,\n        layouts: {\n          screen: layout,\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft,\n        },\n      })\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimationContext = memoize(\n    (\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n\n    const distance =\n      gestureDirection === 'vertical' ||\n      gestureDirection === 'vertical-inverted'\n        ? gestureResponseDistance?.vertical !== undefined\n          ? gestureResponseDistance.vertical\n          : GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : gestureResponseDistance?.horizontal !== undefined\n        ? gestureResponseDistance.horizontal\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n        };\n      }\n    }\n  }\n\n  private gestureRef: React.Ref<PanGestureHandler> = React.createRef();\n\n  render() {\n    const {\n      styleInterpolator,\n      index,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const animationContext = this.getCardAnimationContext(\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle,\n    } = interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver: true }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent = backgroundColor\n      ? Color(backgroundColor).alpha() === 0\n      : false;\n\n    return (\n      <View pointerEvents=\"box-none\" {...rest}>\n        {overlayEnabled && overlayStyle ? (\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[styles.overlay, overlayStyle]}\n          />\n        ) : null}\n        <Animated.View\n          style={[styles.container, containerStyle, customContainerStyle]}\n          pointerEvents=\"box-none\"\n        >\n          <PanGestureHandler\n            ref={this.gestureRef}\n            enabled={layout.width !== 0 && gestureEnabled}\n            onGestureEvent={handleGestureEvent}\n            onHandlerStateChange={this.handleGestureStateChange}\n            {...this.gestureActivationCriteria()}\n          >\n            <Animated.View style={[styles.container, cardStyle]}>\n              {shadowEnabled && shadowStyle && !isTransparent ? (\n                <Animated.View\n                  style={[\n                    styles.shadow,\n                    gestureDirection === 'horizontal'\n                      ? styles.shadowHorizontal\n                      : styles.shadowVertical,\n                    shadowStyle,\n                  ]}\n                  pointerEvents=\"none\"\n                />\n              ) : null}\n              <View ref={this.content} style={[styles.content, contentStyle] as any}>\n                <StackGestureRefContext.Provider value={this.gestureRef}>\n                  <CardAnimationContext.Provider value={animationContext}>\n                    {children}\n                  </CardAnimationContext.Provider>\n                </StackGestureRefContext.Provider>\n              </View>\n            </Animated.View>\n          </PanGestureHandler>\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowVertical: {\n    top: 0,\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}